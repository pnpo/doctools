reconfiguration bla (Name x;
					Name y) {
	Pattern g;
	@ id ();
}

reconfiguration blabla(Pattern p,p1; Set<Pair<Node>> M) {
	@ par (p);
	@ id ();
	Name a;
	Name y = a;
	Name b;
	Name c;
	Node h;
	
	Set<Node> yy = S(N(a,b,c) + h) + S(h);
	Name g = N(a);
	@ bla (b+c,h);
	forall(Node n : M) {
		Name y = b;
		Node n1,n2; 
		Channel n3;
		nn1 = x.fst; 
		n2 = n3.in[2]; 
		
		Set<Node> E = S(n1, n2);
		@ join(E);
		
		forall ( Name nn : p)
		{	
			@ remove(n);
			Pattern p1 = @ par(p);
			forall (Pattern p3 : U) {
				Set<Node> E5 = E + S(S(g),S(n2));
				Set<Node> E65 = E + S(N(g));
				forall (Pattern p5 : U) {
					Set<Node> E6 = E + S(N(g));
					Set<Node> E6 = n1 + S(mi);
					Set<Node> E8 = n1 + S(mi);
				}
				Set<Node> E9 = n1 + S(mi);
				Set<Node> E10 = n1 + S(mi);
			}
			
			forall (Pattern p5 : U) {
				E12 = n1 + S(mi);
				Set<Node> E13 = n1 + S(mi);
				Set<Node> E14 = n1 + S(mi);
			}
			Set<Node> E1 = n1 + S(mi);
			@ join(E1);
			Set<Node> E11 = n1 + S(mi);
		}
		Pattern p2 = @ split(n);
		Set<Node> E2 = n2 + S(mo);
		@ join(E2);  
	}
	Node pp1;
	Node pp2;
	Set<Node> n2 = pp2.in - pp1.in ;
	Set<Node> n3 = pp2.out - pp1.out ;
	Set<Node> n4 = pp2.out - pp1.out ;
}


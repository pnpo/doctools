group Templates;

mkclass(name, fields, constructor, method) ::= <<
public class <name> extends Reconfiguration {

<fields>
<constructor>

<method>
}
>>


list_fields(datatype, ids) ::= <<
<ids:{ id | 	final private <datatype> <id>;
 }>
>>


constructor(n, dts, ids) ::= <<
	public <n>(<dts,ids:{ dt,id | <dt> <id>}; separator=", ">) {
		<ids:{ id | this.<id> = <id>}; separator="; 
">;
	}
>>


apply_method(reconfs, insts) ::= <<
	@Override
	public CoordinationPattern2 apply(CoordinationPattern2 $cp) { 
		<reconfs:{ rec | <rec>}; separator="
">
		<insts:{ inst | <inst>}; separator="
">
		return new CoordinationPattern2($cp); 
	}
>>



mkmain(files, args, insts) ::= <<
public class Main {
	
	private static LinkedHashMap\<String, CPModelInternal\> patterns;
	
	public static void main(String[] args){
	
		CPModelInternal $cpmi = null;
		CoordinationPattern2 $new_cp = null;
	
		String[] files = {
			<files:{ file | "<file>"}; separator=", 
			">
		};
		
		for (String file : files){
			CPBuilder cp_model_builder = new CPBuilder(file);
			ReoLangCP2 res = cp_model_builder.performModelConstruction( new LinkedHashMap\<String, CPModelInternal\>(), new SymbolsTable() );
			patterns = res.getPatterns() != null ? res.getPatterns() : patterns;
		}
		
		<args>
		try {
			<insts>
		}  
        catch (Throwable e) {  
            System.err.println(e);  
        }  
	}
}
>>

list_args(cp, ids) ::= <<
<ids:{ id |	final CoordinationPattern2 <id> = new CoordinationPattern2(patterns.get("<cp>").getSimplePattern());
}>
>>

declaration(cp, ids) ::= <<
<ids:{ id |final CoordinationPattern2 <id> = new CoordinationPattern2(patterns.get("<cp>").getSimplePattern());
}>
>>

assignment(name, var, dts, ids, cp, res) ::= <<
// ************* <name> ************* //
Class <var>_class = Class.forName( "<name>" );
			
Constructor <var>_constructor = <var>_class.getConstructor(<dts:{ dt | <dt>.class}; separator=", ">);
Object <var>_obj = <var>_constructor.newInstance(<ids>);
			
Method <var>_apply = <var>_class.getMethod("apply", CoordinationPattern2.class);
<res:{ r | CoordinationPattern2 <r> = (CoordinationPattern2) <var>_apply.invoke(<var>_obj, <cp> );}; separator="
">
// ********************************* //
>>			